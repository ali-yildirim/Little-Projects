{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "00c2f5ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "99ea1fb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('Codes-of-Currencies.xlsx')\n",
    "initial_dict = df.set_index('Name of the currency')['Code'].to_dict()\n",
    "currency_dict = {key.upper(): value for key, value in initial_dict.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "96f9ed14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "77e363ed3d314ac7a8a8bc886a271555",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Dropdown(description='Currency:', options=('United Arab Emirates dirham', 'Afghan afghani', 'Albanian lek', 'Aâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a list of options\n",
    "options_list = list(df['Name of the currency'].unique())\n",
    "\n",
    "# Create a dropdown widget\n",
    "option_dropdown = widgets.Dropdown(\n",
    "    options=options_list,\n",
    "    description='Currency:',\n",
    "    disabled=False,\n",
    "\n",
    ")\n",
    "\n",
    "# Define a function to display the selected information\n",
    "def display_code(selected_name):\n",
    "    selected_code = df[df['Name of the currency'] == selected_name]['Code'].values[0]\n",
    "    return (f\"Code: {selected_code}\")\n",
    "\n",
    "# Display the dropdown widget\n",
    "display(option_dropdown)\n",
    "output = widgets.interactive(display_code, selected_name=option_dropdown)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "0dea95d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Code: DKK\n"
     ]
    }
   ],
   "source": [
    "print(output.result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "3a27c306",
   "metadata": {},
   "outputs": [],
   "source": [
    "code = output.result[6:9]\n",
    "url = f\"https://www.google.com/finance/quote/TRY-{code.upper()}\"\n",
    "response = requests.get(url)\n",
    "html = response.text\n",
    "soup = BeautifulSoup(html, 'html.parser')\n",
    "div_element = soup.find('div', {'data-last-price': True})\n",
    "exchange_rate = div_element['data-last-price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "46622bd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 TRY = 0.251743885 DKK\n"
     ]
    }
   ],
   "source": [
    "print(f\"1 TRY = {exchange_rate} {code.upper()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13a7ac69",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
